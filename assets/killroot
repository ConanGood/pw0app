#!/system/bin/sh

FROM_HUNTMIX_TO_WORLD=$(readlink -f $0)
. ${FROM_HUNTMIX_TO_WORLD%/*}/bootroot_env

#############################
#### DEFINE GLOBAL VARIABLES ####
#############################

if [ -z "$MNT" ]; then
    echo "[-] The \$MNT variable is not defined, logic error."
    exit 2
fi

isAllunmounted=0

#######################
#### DEFINE FUNCTIONS ####
#######################

### Kill all running services and processes ###
f_kill_pids() {
    echo "[!] Killing all running services..."
    local lsof_full=$($BUSYBOX lsof | awk '{print $1}' | grep -c '^lsof')
    if [ "${lsof_full}" -eq 0 ]; then
        local pids=$($BUSYBOX lsof | grep "$MNT" | awk '{print $1}' | uniq)
    else
        local pids=$($BUSYBOX lsof | grep "$MNT" | awk '{print $2}' | uniq)
    fi
    if [ -n "${pids}" ]; then
        kill -9 ${pids} 2> /dev/null
        return $?
    fi
    return 0
}

########## Restore the setup ##########
f_restore_setup() {
    echo "[!] Restoring the setup to previous state..."

    ## Set shmmax to 128mb to free memory ##
    $BUSYBOX sysctl -w kernel.shmmax=134217728

    ## Remove all the remaining chroot VNC session pid and log files..##
    echo "[!] Removing all the remaining chroot VNC session pid and log files..."
    rm -rf $MNT/tmp/.X11* $MNT/tmp/.X*-lock $MNT/root/.vnc/*.pid $MNT/root/.vnc/*.log > /dev/null 2>&1
}

########## Umount the fs one by one ##########
f_umount_fs() {
    if $BUSYBOX mountpoint -q $MNT/$1; then
        if $BUSYBOX umount -l "$MNT/$1" || $BUSYBOX umount -f "$MNT/$1"; then
            echo "[+] Umounted $MNT/$1"
            if [ ! "$1" = "dev/pts" -a ! "$1" = "dev/shm" ]; then
                if rm -rf $MNT/$1; then
                    echo "[+] Removed $MNT/$1"
                else
                    echo "[-] Failed to remove $MNT/$1"
                    isAllunmounted=1
                fi
            fi
        else
            echo "[-] Failed to umount $MNT/$1"
            isAllunmounted=1
        fi
    else
        if [ -d $MNT/$1 ]; then
            echo "[+] $MNT/$1 is unmounted already."
            if rm -rf $MNT/$1; then
                echo "[+] Removed $MNT/$1"
            else
                echo "[-] Failed to remove $MNT/$1"
                isAllunmounted=1
            fi
        fi
    fi

}

########## Umount if chroot directory is NOT a mountpoint(directory method) ##########
f_dir_umount() {
    sync
    f_kill_pids
    f_restore_setup
    echo "[!] Removing all fs mounts..."
    f_umount_sdcard
    FS=(dev/pts dev/shm dev proc sys system)
    for i in "${FS[@]}"; do
        f_umount_fs "$i"
    done
}

########## Check if chroot directory is a mountpoint ##########
f_is_mntpoint() {
    if [ -d "$MNT" ]; then
        $BUSYBOX mountpoint -q "$MNT" && return 0
        return 1
    fi
}

########## Unmount sdcard so it wont break internal storage ##########
### (This may need's more attention from someone else)
f_umount_sdcard() {
    $BUSYBOX umount -l $MNT/sdcard
    echo "[+] Umounted $MNT/sdcard"
}

#################
#### MAIN PART ####
#################

f_is_mntpoint
res=$?
case $res in
1)
    echo "[!] $MNT unmounting chroot now..."
    f_dir_umount
    ;;
*)
    echo "[!] $MNT directory is not existed! Aborting..."
    exit 1
esac

if [ -z "$(cat /proc/mounts | grep $MNT)" ]; then
    echo "[+] All done."
    isAllunmounted=0
else
    echo "[-] There are still mounted points not unmounted yet."
    echo "[-] Try run this script again and see if they can be unmounted now."
    isAllunmounted=1
fi

return $isAllunmounted
